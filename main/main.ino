#include <U8g2lib.h>
#include <Keyboard.h>
#include <FastLED.h>

#define NUM_LEDS 8
CRGB leds[NUM_LEDS];

int Air_Press_State [6] = {0,0,0,0,0,0};

//引脚定义
int Air_Pin     [6] = {9,10,18,19,20,21};
int Air_Key      [] = {4,5,6,7,8,9};
int Air_Switch      = 5;
int Button_Pin      = 8;
//判定阈值
int linmindu = 200;

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, 0, 1);
const unsigned char XLXLSPACLE[] U8X8_PROGMEM = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xb8,0xff,0xef,0xf7,0xff,0xfb,0x7f,0x7e,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xff,0xc3,0xe3,0xff,0xf1,0x3f,0x3c,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xfe,0xe3,0xe3,0xff,0xe1,0x3f,0x3e,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xfc,0xe1,0xe3,0xff,0xc3,0x1f,0x3e,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0xf8,0xf0,0xe3,0xff,0x87,0x0f,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x70,0xf8,0xe3,0xff,0x0f,0x87,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x30,0xfc,0xe3,0xff,0x0f,0xc3,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x21,0xfe,0xe3,0xff,0x1f,0xe2,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0xfe,0xe3,0xff,0x3f,0xe0,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x07,0xff,0xe3,0xff,0x7f,0xf0,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x07,0xff,0xe3,0xff,0x7f,0xf8,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0xff,0xe3,0xff,0x3f,0xf0,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0xfe,0xe3,0xff,0x3f,0xe0,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x21,0xfc,0xe3,0xff,0x1f,0xc2,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x70,0xf8,0xe3,0xff,0x0f,0x87,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0xf8,0xf0,0xe3,0xff,0x87,0x8f,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xfc,0xf0,0xe3,0xff,0xc3,0x0f,0x3f,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xfe,0xe1,0x03,0xc0,0xe3,0x1f,0x3e,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xfe,0xc3,0x03,0x80,0xe1,0x3f,0x3c,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xff,0xe7,0x03,0x80,0xf1,0x7f,0x3e,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x01,0xff,0x07,0x00,0x07,0x00,0xf8,0x1f,0x18,0x00,0xf0,0xff,0x01,0x00,0xc0,0xff,0x03,0xff,0x0f,0x00,0x07,0x00,0xfe,0x3f,0x38,0x00,0xf0,0xff,0x01,0x00,0xc0,0x81,0x03,0x03,0x1e,0x80,0x0f,0x00,0x0f,0x38,0x38,0x00,0x30,0x00,0x00,0x00,0xe0,0x00,0x03,0x03,0x1c,0x80,0x0f,0x80,0x07,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0xe0,0x00,0x00,0x03,0x18,0xc0,0x0f,0xc0,0x03,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0xe0,0x00,0x00,0x03,0x18,0xc0,0x1d,0xc0,0x01,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0xe0,0x01,0x00,0x03,0x18,0xe0,0x1c,0xc0,0x01,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0xc0,0x07,0x00,0x03,0x1c,0xe0,0x38,0xe0,0x00,0x00,0x38,0x00,0x70,0x00,0x00,0x00,0x80,0x3f,0x00,0x03,0x1e,0x70,0x38,0xe0,0x00,0x00,0x38,0x00,0xf0,0x7f,0x00,0x00,0x00,0xfe,0x00,0xff,0x0f,0x70,0x70,0xe0,0x00,0x00,0x38,0x00,0xf0,0x7f,0x00,0x00,0x00,0xf0,0x01,0xff,0x03,0x30,0x70,0xe0,0x00,0x00,0x38,0x00,0x70,0x00,0x00,0x00,0x00,0xc0,0x03,0x03,0x00,0xf8,0xff,0xe0,0x00,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0x00,0x80,0x07,0x03,0x00,0xf8,0xff,0xc0,0x01,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x07,0x03,0x00,0x1c,0xe0,0xc0,0x01,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0x20,0x00,0x07,0x03,0x00,0x1c,0xc0,0x81,0x03,0x00,0x38,0x00,0x30,0x00,0x00,0x00,0xf0,0x80,0x03,0x03,0x00,0x0e,0xc0,0x81,0x07,0x30,0x38,0x00,0x30,0x00,0x00,0x00,0xe0,0xe3,0x03,0x03,0x00,0x0e,0x80,0x03,0x3f,0x3e,0x38,0x00,0x70,0x00,0x00,0x00,0xc0,0xff,0x01,0x03,0x00,0x06,0x80,0x03,0xfc,0x3f,0xf8,0xff,0xf0,0xff,0x01,0x00,0x00,0x7f,0x00,0x03,0x00,0x06,0x00,0x03,0xf0,0x0f,0xf8,0x7f,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

void setup()
{
  int Air_Pin_Init = 0;   //pin air引脚为input
  while(Air_Pin_Init <= 5){
      pinMode(Air_Pin[Air_Pin_Init], INPUT); 
      Air_Pin_Init++;
  };

  pinMode(Air_Switch, INPUT);
  pinMode(Button_Pin, INPUT);

  Keyboard.begin(); //Init keyboard emulation
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, 7>(leds, NUM_LEDS);
  FastLED.setBrightness(64);
  u8g2.begin();

  SelfCheck();

}

void loop()
{
  Button();

  Screen();

  if (digitalRead(Air_Switch) == 1){      //air部分
    air(1);
    air(2);
    air(3);
    air(4);
    air(5);
    air(6);
    leds[1] = CRGB::Green;
    FastLED.show();
  }else{
    leds[1] = CRGB::Black;
    FastLED.show();
    release_air ();
  }
}

//按钮部分
void Button(){

  if(analogRead(Button_Pin) > 200){
    if(analogRead(Button_Pin) > 300){
      if(analogRead(Button_Pin) > 400){
        if(analogRead(Button_Pin) > 500){
          if(analogRead(Button_Pin) > 600){
            if(analogRead(Button_Pin) > 700){
              if(analogRead(Button_Pin) > 820){
                if(analogRead(Button_Pin) > 999){
                    Keyboard.press(0x33);
                    delay(250);
                    Keyboard.release(0x33);
                }else{
                    Keyboard.press(KEY_RETURN);
                    delay(250);
                    Keyboard.release(KEY_RETURN);
                }
              }else{
                    Keyboard.press(0x31);
                    delay(250);
                    Keyboard.release(0x31);

              }
            }
          }
        }
      }
    }
  }

}

//检测输出air部分
bool air(int number){
  number--;   //将传入的编号减一，方便看
  char key = (char)(Air_Key[number] + '0');   //转换int为char（keybord.press/release只能char）
  if       (analogRead(Air_Pin[number]) < linmindu)   //与阈值对比
  {
    if (Air_Press_State[number] == 0){      //检测是否已经被按下，避免持续输出
      Keyboard.press(key);            //按下
      Air_LED(number,1);
      Air_Press_State[number] = 1;      //设置已按下状态值1
      return true;
    }
  }else if (analogRead(Air_Pin[number]) > linmindu)
  {
      if (Air_Press_State[number] == 1){
      Keyboard.release(key);      //释放
      Air_LED(number,0);
      Air_Press_State[number] = 0;    //初始化状态值
      return false;
    }
  }
}

//放开全部air
void release_air (){
    int i = 0;
    while (i <=6){
      if (Air_Press_State[i] == 1){
        char k = (char)(Air_Key[i] + '0');   //转换int为char（keybord.press/release只能char）
        Keyboard.release(k);      //释放
        Air_Press_State[i] = 0;    //初始化状态值
        Air_LED(i,0);
      }
      i++;
    }
}

//air灯光
void Air_LED(int number,int status){
  int led_number = number+2;
  if(status==1){
    leds[led_number] = CRGB::Green;
    FastLED.show();
  }else{
    leds[led_number] = CRGB::Pink;
    FastLED.show();
  }
}
//屏幕部分
void Screen(){
  // int CircleX = 5;
  // int CircleY [6]= {5,15,25,35,45,55};

  // u8g2.clearBuffer();
  // u8g2.setFont(u8g2_font_9x15_tf);

  // int Screen_Air = 0;
  // while(Screen_Air <= 6){
  //   if (Air_Press_State[Screen_Air]==1){
  //     u8g2.drawDisc(CircleX, CircleY[Screen_Air], 5);
  //     u8g2.sendBuffer();
  //      Screen_Air++;
  //   }else{
  //     u8g2.drawCircle(CircleX, CircleY[Screen_Air], 5);
  //     u8g2.sendBuffer();
  //     Screen_Air++;
  //   }
  // }
}

//自检
void SelfCheck(){
  fill_palette(0, 8, 31, 5, ForestColors_p, 255, LINEARBLEND );
  leds[0] = CRGB::Red;
  FastLED.show();


  
  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 0, 128, 64, XLXLSPACLE);
  u8g2.sendBuffer();
  delay(500);

  fadeToBlackBy( leds, 30, 10);
  leds[0] = CRGB::Green;
  FastLED.show();

}